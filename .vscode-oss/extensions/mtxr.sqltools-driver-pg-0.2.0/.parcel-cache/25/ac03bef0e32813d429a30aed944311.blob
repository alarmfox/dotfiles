"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.tokenize = exports.format = void 0;

var _Db2Formatter = _interopRequireDefault(require("./languages/Db2Formatter"));

var _N1qlFormatter = _interopRequireDefault(require("./languages/N1qlFormatter"));

var _PlSqlFormatter = _interopRequireDefault(require("./languages/PlSqlFormatter"));

var _StandardSqlFormatter = _interopRequireDefault(require("./languages/StandardSqlFormatter"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Format whitespaces in a query to make it easier to read.
 *
 * @param {string} query
 * @param {Config} cfg
 *  @param {string} cfg.language Query language, default is Standard SQL
 *  @param {string} cfg.indent Characters used for indentation, default is "  " (2 spaces)
 *  @param {string} cfg.reservedWordCase Reserverd case change. Allowed upper, lower, null. Default null (no changes).
 *  @param {number | 'preserve'} cfg.linesBetweenQueries How many line breaks between queries
 *  @param {any} cfg.params Collection of params for placeholder replacement
 * @return {string}
 */
const format = (query, cfg = {}) => {
  switch (cfg.language) {
    case 'db2':
      return new _Db2Formatter.default(cfg).format(query);

    case 'n1ql':
      return new _N1qlFormatter.default(cfg).format(query);

    case 'pl/sql':
      return new _PlSqlFormatter.default(cfg).format(query);

    case 'sql':
    default:
      return new _StandardSqlFormatter.default(cfg).format(query);
  }
};
/**
 * Tokenize query.
 *
 * @param {string} query
 * @param {Config} cfg
 * @return {Token[]}
 */


exports.format = format;

const tokenize = (query, cfg = {}) => {
  return new _StandardSqlFormatter.default(cfg).tokenize(query);
};

exports.tokenize = tokenize;
var _default = {
  format,
  tokenize
};
exports.default = _default;