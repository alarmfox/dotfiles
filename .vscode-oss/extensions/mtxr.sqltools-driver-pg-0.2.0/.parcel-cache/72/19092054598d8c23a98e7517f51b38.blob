{"mappings":"mCAEO,MAAMA,EAAiC,CAC5C,CAAEC,YAAa,aAAcC,MAAO,cACpC,CAAED,YAAa,eAAgBC,MAAO,uBCJxCC,EAAiBC,KAAKC,MAAM,ytECG5B,MAAQC,UAAAA,EAAWC,KAAAA,GAAbJ,mBAECK,eAAwBC,GAC7B,MAAMC,EAAWC,EAAWC,aAAyB,iBACrD,IAAKF,EACH,MAAM,IAAIG,MAAM,gCAEZH,EAASI,WAEf,MAAMC,EAAML,EAASM,QAEfC,EAAe,GAAEX,KAAaC,IAC9BW,EAA2B,CAC/BD,YAAAA,EACAV,KAAO,6BACPY,KAAM,SACNC,eAAeC,GAGbA,EAAUC,eAAeC,IAAK,UAASC,EAAe,GAAGtB,cAAe,CACtEuB,OAAQhB,EAAWiB,eAAe,uBAClCC,QAASlB,EAAWiB,eAAe,wBACnCE,SAAUnB,EAAWiB,eAAe,2BAGtCL,EAAUC,eAAeC,IAAK,UAASC,EAAe,GAAGtB,cAAe,CACtEuB,OAAQhB,EAAWiB,eAAe,6BAClCC,QAASlB,EAAWiB,eAAe,8BACnCE,SAAUnB,EAAWiB,eAAe,iCAEtCF,EAAeK,QAAQ,EAAG3B,MAAAA,MACxBmB,EAAUC,eAAeC,IAAK,UAASrB,iBAAsBe,GAC7DI,EAAUC,eAAeC,IAAK,UAASrB,sBAA2BO,EAAWiB,eAAe,2BAC5FL,EAAUC,eAAeC,IAAK,UAASrB,cAAmBO,EAAWiB,eAAe,2BAEhFL,EAAUS,OAAOC,YAAY,oBAAqB,CAAEC,KAAMvB,EAAWiB,eAAe,wBAI9F,OADAX,EAAIkB,eAAef,GACZ,CACLgB,WAvCe,sBAwCfC,0BAA2B,EAAGC,SAAAA,MAC5B,MAAMC,EAAgB,CAAC,mBAAoB,KAAM,eAajD,OAZID,EAASE,cACPF,EAASE,YAAYC,WAAWC,cAAcC,SAAS,OACzDJ,EAAcK,KAAK,YACVN,EAASE,YAAYC,WAAWC,cAAcC,SAAS,UAChEL,EAASO,SAAW,GACpBN,EAAcK,KAAK,mBACXN,EAASE,YAAYC,WAAWC,cAAcC,SAAS,SAC/DJ,EAAcK,KAAK,mBAGvBL,EAAcR,QAAQe,UAAYR,EAASQ,IAEpCR,GAETS,0BAA2B,EAAGT,SAAAA,MAC5B,MAAMU,EAA4B,IAC7BV,EACHW,iBAAkB,mBAepB,OAbIX,EAASY,WACXF,EAASC,iBAAmB,cACnBX,EAASa,gBAClBH,EAASC,iBAAmB,qBAG1BX,EAASc,gBACXJ,EAASR,YAAc,wBAChBQ,EAASH,UACsB,iBAAtBP,EAASO,kBAClBG,EAASI,eAChBJ,EAASR,YAAcF,EAASO,SAAW,gBAAkB,sBAExDG,GAETK,cAAa3B,uBAIV","sources":["./src/constants.ts","./package.json","./src/extension.ts"],"sourcesContent":["import { IDriverAlias } from '@sqltools/types';\n\nexport const DRIVER_ALIASES: IDriverAlias[] = [\n  { displayName: 'PostgreSQL', value: 'PostgreSQL'},\n  { displayName: 'AWS Redshift', value: 'AWS Redshift'},\n];","{\n  \"name\": \"sqltools-driver-pg\",\n  \"displayName\": \"SQLTools PostgreSQL/Redshift Driver\",\n  \"description\": \"SQLTools PostgreSQL/Redshift Driver\",\n  \"version\": \"0.1.0\",\n  \"engines\": {\n    \"vscode\": \"^1.42.0\"\n  },\n  \"publisher\": \"mtxr\",\n  \"license\": \"MIT\",\n  \"private\": true,\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mtxr/vscode-sqltools.git\",\n    \"directory\": \"packages/drivers.pg\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/mtxr/vscode-sqltools/labels/pg\"\n  },\n  \"keywords\": [\n    \"sqltools-driver\",\n    \"postgre\",\n    \"postgres\",\n    \"postgresql\",\n    \"redshift\",\n    \"aws redshift\"\n  ],\n  \"galleryBanner\": {\n    \"theme\": \"dark\",\n    \"color\": \"#333333\"\n  },\n  \"icon\": \"icon.png\",\n  \"categories\": [\n    \"Programming Languages\",\n    \"Snippets\",\n    \"Formatters\",\n    \"Other\"\n  ],\n  \"extensionDependencies\": [\n    \"mtxr.sqltools\"\n  ],\n  \"activationEvents\": [\n    \"*\",\n    \"onLanguage:sql\",\n    \"onCommand:sqltools.*\"\n  ],\n  \"main\": \"./out/extension.js\",\n  \"ls\": \"./out/ls/plugin.js\",\n  \"targets\": {\n    \"main\": {\n      \"context\": \"electron-renderer\",\n      \"includeNodeModules\": {\n        \"vscode\": false\n      },\n      \"engines\": {\n        \"electron\": \">=6.x\"\n      },\n      \"outputFormat\": \"commonjs\"\n    },\n    \"ls\": {\n      \"context\": \"node\",\n      \"includeNodeModules\": true,\n      \"outputFormat\": \"commonjs\",\n      \"engines\": {\n        \"node\": \">=10.x\"\n      }\n    }\n  },\n  \"optimizers\": {\n    \"*.js\": [\n      \"@parcel/optimizer-terser\"\n    ]\n  },\n  \"alias\": {\n    \"pg-native\": \"pg/lib/native\"\n  },\n  \"scripts\": {\n    \"clean\": \"rimraf -rf out dist *.vsix\",\n    \"predev\": \"yarn run clean\",\n    \"dev\": \"concurrently -k \\\"npm:watch:*\\\"\",\n    \"prebuild\": \"yarn run clean && yarn run ts --noEmit\",\n    \"build\": \"NODE_ENV=production concurrently \\\"npm:build:*\\\"\",\n    \"prepackage\": \"yarn run build\",\n    \"package\": \"vsce package --yarn -o .\",\n    \"build:ext\": \"NODE_PATH=../../ parcel build ./src/extension.ts --target main --dist-dir out --no-cache\",\n    \"build:ls\": \"NODE_PATH=../../ parcel build ./src/ls/plugin.ts --target ls --dist-dir out --no-cache\",\n    \"watch:tsc\": \"yarn run ts -w --noEmit --preserveWatchOutput\",\n    \"watch:ext\": \"NODE_PATH=../../ parcel watch ./src/extension.ts --target main --dist-dir out --no-hmr\",\n    \"watch:ls\": \"NODE_PATH=../../ parcel watch ./src/ls/plugin.ts --target ls --dist-dir out --no-hmr\",\n    \"ts\": \"tsc -p .\"\n  },\n  \"devDependencies\": {\n    \"@parcel/optimizer-terser\": \"^2.0.0-alpha.3\",\n    \"@sqltools/base-driver\": \"latest\",\n    \"@types/lodash\": \"^4.14.123\",\n    \"@types/pg\": \"^7.14.3\",\n    \"@types/vscode\": \"^1.42.0\",\n    \"@types/webpack-env\": \"^1.15.2\",\n    \"concurrently\": \"^5.2.0\",\n    \"lodash\": \"^4.17.19\",\n    \"parcel\": \"2.0.0-beta.1\",\n    \"pg\": \"^8.2.1\",\n    \"rimraf\": \"^3.0.2\",\n    \"typescript\": \"^3.7.3\",\n    \"vsce\": \"1.77.0\"\n  }\n}\n","import { IExtension, IExtensionPlugin, IDriverExtensionApi } from '@sqltools/types';\nimport { ExtensionContext, extensions } from 'vscode';\nimport { DRIVER_ALIASES } from './constants';\nconst { publisher, name } = require('../package.json');\nconst driverName = 'PostgreSQL/Redshift';\nexport async function activate(extContext: ExtensionContext): Promise<IDriverExtensionApi> {\n  const sqltools = extensions.getExtension<IExtension>('mtxr.sqltools');\n  if (!sqltools) {\n    throw new Error('SQLTools not installed');\n  }\n  await sqltools.activate();\n\n  const api = sqltools.exports;\n\n  const extensionId = `${publisher}.${name}`;\n  const plugin: IExtensionPlugin = {\n    extensionId,\n    name: `${driverName} Plugin`,\n    type: 'driver',\n    async register(extension) {\n      // register ext part here\n      // postgres\n      extension.resourcesMap().set(`driver/${DRIVER_ALIASES[0].value}/icons`, {\n        active: extContext.asAbsolutePath('icons/pg/active.png'),\n        default: extContext.asAbsolutePath('icons/pg/default.png'),\n        inactive: extContext.asAbsolutePath('icons/pg/inactive.png'),\n      });\n      // redshift\n      extension.resourcesMap().set(`driver/${DRIVER_ALIASES[1].value}/icons`, {\n        active: extContext.asAbsolutePath('icons/redshift/active.png'),\n        default: extContext.asAbsolutePath('icons/redshift/default.png'),\n        inactive: extContext.asAbsolutePath('icons/redshift/inactive.png'),\n      });\n      DRIVER_ALIASES.forEach(({ value }) => {\n        extension.resourcesMap().set(`driver/${value}/extension-id`, extensionId);\n        extension.resourcesMap().set(`driver/${value}/connection-schema`, extContext.asAbsolutePath('connection.schema.json'));\n        extension.resourcesMap().set(`driver/${value}/ui-schema`, extContext.asAbsolutePath('ui.schema.json'));\n      });\n      await extension.client.sendRequest('ls/RegisterPlugin', { path: extContext.asAbsolutePath('out/ls/plugin.js') });\n    }\n  };\n  api.registerPlugin(plugin);\n  return {\n    driverName,\n    parseBeforeSaveConnection: ({ connInfo }) => {\n      const propsToRemove = ['connectionMethod', 'id', 'usePassword'];\n      if (connInfo.usePassword) {\n        if (connInfo.usePassword.toString().toLowerCase().includes('ask')) {\n          propsToRemove.push('password');\n        } else if (connInfo.usePassword.toString().toLowerCase().includes('empty')) {\n          connInfo.password = '';\n          propsToRemove.push('askForPassword');\n        } else if(connInfo.usePassword.toString().toLowerCase().includes('save')) {\n          propsToRemove.push('askForPassword');\n        }\n      }\n      propsToRemove.forEach(p => delete connInfo[p]);\n\n      return connInfo;\n    },\n    parseBeforeEditConnection: ({ connInfo }) => {\n      const formData: typeof connInfo = {\n        ...connInfo,\n        connectionMethod: 'Server and Port',\n      };\n      if (connInfo.socketPath) {\n        formData.connectionMethod = 'Socket File';\n      } else if (connInfo.connectString) {\n        formData.connectionMethod = 'Connection String';\n      }\n\n      if (connInfo.askForPassword) {\n        formData.usePassword = 'Ask on connect';\n        delete formData.password;\n      } else if (typeof connInfo.password === 'string') {\n        delete formData.askForPassword;\n        formData.usePassword = connInfo.password ? 'Save password' : 'Use empty password';\n      }\n      return formData;\n    },\n    driverAliases: DRIVER_ALIASES,\n  }\n}\n\nexport function deactivate() {}\n"],"names":["DRIVER_ALIASES","displayName","value","$dade76933129c0a2719f106e4de36fcb$exports","JSON","parse","publisher","name","async","extContext","sqltools","extensions","getExtension","Error","activate","api","exports","extensionId","plugin","type","[object Object]","extension","resourcesMap","set","$c3145410d0524983fb21738d548218f$export$DRIVER_ALIASES","active","asAbsolutePath","default","inactive","forEach","client","sendRequest","path","registerPlugin","driverName","parseBeforeSaveConnection","connInfo","propsToRemove","usePassword","toString","toLowerCase","includes","push","password","p","parseBeforeEditConnection","formData","connectionMethod","socketPath","connectString","askForPassword","driverAliases"],"version":3,"file":"extension.js.map"}