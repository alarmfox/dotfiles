"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.activate = activate;
exports.deactivate = deactivate;

var _vscode = require("vscode");

var _constants = require("./constants");

const {
  publisher,
  name
} = require('../package.json');

const driverName = 'PostgreSQL/Redshift';

async function activate(extContext) {
  const sqltools = _vscode.extensions.getExtension('mtxr.sqltools');

  if (!sqltools) {
    throw new Error('SQLTools not installed');
  }

  await sqltools.activate();
  const api = sqltools.exports;
  const extensionId = `${publisher}.${name}`;
  const plugin = {
    extensionId,
    name: `${driverName} Plugin`,
    type: 'driver',

    async register(extension) {
      // register ext part here
      // postgres
      extension.resourcesMap().set(`driver/${_constants.DRIVER_ALIASES[0].value}/icons`, {
        active: extContext.asAbsolutePath('icons/pg/active.png'),
        default: extContext.asAbsolutePath('icons/pg/default.png'),
        inactive: extContext.asAbsolutePath('icons/pg/inactive.png')
      }); // redshift

      extension.resourcesMap().set(`driver/${_constants.DRIVER_ALIASES[1].value}/icons`, {
        active: extContext.asAbsolutePath('icons/redshift/active.png'),
        default: extContext.asAbsolutePath('icons/redshift/default.png'),
        inactive: extContext.asAbsolutePath('icons/redshift/inactive.png')
      });

      _constants.DRIVER_ALIASES.forEach(({
        value
      }) => {
        extension.resourcesMap().set(`driver/${value}/extension-id`, extensionId);
        extension.resourcesMap().set(`driver/${value}/connection-schema`, extContext.asAbsolutePath('connection.schema.json'));
        extension.resourcesMap().set(`driver/${value}/ui-schema`, extContext.asAbsolutePath('ui.schema.json'));
      });

      await extension.client.sendRequest('ls/RegisterPlugin', {
        path: extContext.asAbsolutePath('out/ls/plugin.js')
      });
    }

  };
  api.registerPlugin(plugin);
  return {
    driverName,
    parseBeforeSaveConnection: ({
      connInfo
    }) => {
      const propsToRemove = ['connectionMethod', 'id', 'usePassword'];

      if (connInfo.usePassword) {
        if (connInfo.usePassword.toString().toLowerCase().includes('ask')) {
          propsToRemove.push('password');
        } else if (connInfo.usePassword.toString().toLowerCase().includes('empty')) {
          connInfo.password = '';
          propsToRemove.push('askForPassword');
        } else if (connInfo.usePassword.toString().toLowerCase().includes('save')) {
          propsToRemove.push('askForPassword');
        }
      }

      propsToRemove.forEach(p => delete connInfo[p]);

      if (connInfo.pgOptions) {
        delete connInfo.pgOptions['useSsl'];
      }

      return connInfo;
    },
    parseBeforeEditConnection: ({
      connInfo
    }) => {
      const formData = { ...connInfo,
        connectionMethod: 'Server and Port'
      };

      if (connInfo.socketPath) {
        formData.connectionMethod = 'Socket File';
      } else if (connInfo.connectString) {
        formData.connectionMethod = 'Connection String';
      }

      if (connInfo.askForPassword) {
        formData.usePassword = 'Ask on connect';
        delete formData.password;
      } else if (typeof connInfo.password === 'string') {
        delete formData.askForPassword;
        formData.usePassword = connInfo.password ? 'Save password' : 'Use empty password';
      }

      if (connInfo.pgOptions && connInfo.pgOptions.ssl) {
        connInfo.pgOptions.useSsl = true;
      }

      return formData;
    },
    driverAliases: _constants.DRIVER_ALIASES
  };
}

function deactivate() {}