"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parse = parse;
exports.cleanUp = cleanUp;
exports.generateInsert = generateInsert;
exports.extractConnName = extractConnName;
exports.getQueryParameters = getQueryParameters;
exports.format = format;

var _sqlFormatter = _interopRequireDefault(require("@sqltools/formatter/src/sqlFormatter"));

var _parse = _interopRequireDefault(require("./parse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Parse multiple queries to an array of queries
 *
 * @export
 * @param {string} query
 * @param {('pg' | 'mysql' | 'mssql')} [driver='mysql']
 * @param {string} [delimiter=';']
 * @returns {string[]}
 */
function parse(query, driver = 'mysql') {
  return (0, _parse.default)(query, driver); // return fixedQuery.split(/\s*;\s*(?=([^']*'[^']*')*[^']*$)/g).filter((v) => !!v && !!`${v}`.trim()).map(v => `${v};`);
}
/**
 * Removes comments and line breaks from query
 *
 * @export
 * @param {string} [query='']
 * @returns
 */


function cleanUp(query = '') {
  if (!query) return '';
  return query.toString().replace('\t', '  ').replace(/(--.*)|(((\/\*)+?[\w\W]+?(\*\/)+))/gmi, '').split(/\r\n|\n/gi).map(v => v.trim()).filter(Boolean).join(' ').trim();
}
/**
 * Generates insert queries based on table columns
 *
 * @export
 * @param {string} table
 * @param {Array<NSDatabase.IColumn>} cols
 * @param {ISettings['format']} [formatOptions]
 * @returns {string}
 */


function generateInsert(table, cols, formatOptions) {
  let insertQuery = `INSERT INTO ${table} (${cols.map(col => col.label).join(', ')}) VALUES (`;
  cols.forEach((col, index) => {
    insertQuery = insertQuery.concat(`'\${${index + 1}:${col.label}:${col.dataType}}', `);
  });
  return format(`${insertQuery.substr(0, Math.max(0, insertQuery.length - 2))});`, formatOptions).replace(/'\${(\d+):([\w\s]+):((int|bool|num|real)[\w\s]*)}'/gi, (_, pos, colName, type) => `\${${pos}:${colName.trim()}:${type.trim()}}`).concat('$0');
}

function extractConnName(query) {
  return ((query.match(/@conn\s*(.+)$/m) || [])[1] || '').trim() || null;
}

function getQueryParameters(query, regexStr) {
  if (!query || !regexStr) return [];
  const regex = new RegExp(regexStr, 'g');
  const paramsMap = {};
  let match;

  while ((match = regex.exec(query)) !== null) {
    const queryPart = query.substring(Math.max(0, regex.lastIndex - 15), Math.min(query.length, regex.lastIndex + 15)).replace(/[\r\n]/g, '').replace(/\s+/g, ' ').trim();

    if (!paramsMap[match[0]]) {
      paramsMap[match[0]] = {
        param: match[0],
        string: `...${queryPart}...`
      };
    }
  }

  return Object.values(paramsMap);
}

const dollarRegex = /\$([^\s]+)/gi;
/**
 * Format query with vscode snippet parameters
 * @param query
 * @param originalQuery
 */

function fixParameters(query, originalQuery) {
  if (!dollarRegex.test(originalQuery)) return query;
  const matches = originalQuery.match(dollarRegex) || [];
  return matches.reduce((text, match) => {
    const matchEscaped = match.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    return text.replace(new RegExp('\\\$' + ' +' + matchEscaped.substr(2), 'g'), match.replace(/\$/g, '$$$$'));
  }, query);
}

function format(query, formatOptions = {}) {
  const {
    reservedWordCase = null,
    insertSpaces = true,
    tabSize = 2,
    ...opts
  } = formatOptions;
  return fixParameters(_sqlFormatter.default.format(query, { ...opts,
    indent: insertSpaces ? ' '.repeat(tabSize) : '\t',
    reservedWordCase
  }), query);
}