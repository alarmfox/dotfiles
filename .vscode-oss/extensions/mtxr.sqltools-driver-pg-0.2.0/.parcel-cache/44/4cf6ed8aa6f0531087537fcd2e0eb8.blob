"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _types = require("./types");

var _Indentation = _interopRequireDefault(require("./Indentation"));

var _InlineBlock = _interopRequireDefault(require("./InlineBlock"));

var _Params = _interopRequireDefault(require("./Params"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const trimSpacesEnd = str => str.replace(/[ \t]+$/u, '');

class Formatter {
  /**
   * @param {Config} cfg
   *   @param {string} cfg.indent
   *   @param {Object} cfg.params
   * @param {Tokenizer} tokenizer
   */
  constructor(cfg, tokenizer, tokenOverride) {
    _defineProperty(this, "tokens", []);

    _defineProperty(this, "previousReservedWord", {
      type: null,
      value: null
    });

    _defineProperty(this, "previousNonWhiteSpace", {
      type: null,
      value: null
    });

    _defineProperty(this, "index", 0);

    this.cfg = cfg;
    this.tokenizer = tokenizer;
    this.tokenOverride = tokenOverride;
    this.indentation = new _Indentation.default(this.cfg.indent);
    this.inlineBlock = new _InlineBlock.default();
    this.params = new _Params.default(this.cfg.params);
  }
  /**
   * Formats whitespaces in a SQL string to make it easier to read.
   *
   * @param {string} query The SQL query string
   * @return {string} formatted query
   */


  format(query) {
    this.tokens = this.tokenizer.tokenize(query);
    const formattedQuery = this.getFormattedQueryFromTokens();
    return formattedQuery.trim();
  }

  getFormattedQueryFromTokens() {
    let formattedQuery = '';
    this.tokens.forEach((token, index) => {
      this.index = index;
      if (this.tokenOverride) token = this.tokenOverride(token, this.previousReservedWord) || token;

      if (token.type === _types.TokenTypes.WHITESPACE) {
        formattedQuery = this.formatWhitespace(token, formattedQuery);
      } else if (token.type === _types.TokenTypes.LINE_COMMENT) {
        formattedQuery = this.formatLineComment(token, formattedQuery);
      } else if (token.type === _types.TokenTypes.BLOCK_COMMENT) {
        formattedQuery = this.formatBlockComment(token, formattedQuery);
      } else if (token.type === _types.TokenTypes.RESERVED_TOP_LEVEL || token.type === _types.TokenTypes.RESERVED_TOP_LEVEL_NO_INDENT || token.type === _types.TokenTypes.RESERVED_NEWLINE || token.type === _types.TokenTypes.RESERVED) {
        formattedQuery = this.formatReserved(token, formattedQuery);
      } else if (token.type === _types.TokenTypes.OPEN_PAREN) {
        formattedQuery = this.formatOpeningParentheses(token, formattedQuery);
      } else if (token.type === _types.TokenTypes.CLOSE_PAREN) {
        formattedQuery = this.formatClosingParentheses(token, formattedQuery);
      } else if (token.type === _types.TokenTypes.NO_SPACE_OPERATOR) {
        formattedQuery = this.formatWithoutSpaces(token, formattedQuery);
      } else if (token.type === _types.TokenTypes.PLACEHOLDER || token.type === _types.TokenTypes.SERVERVARIABLE) {
        formattedQuery = this.formatPlaceholder(token, formattedQuery);
      } else if (token.value === ',') {
        formattedQuery = this.formatComma(token, formattedQuery);
      } else if (token.value === ':') {
        formattedQuery = this.formatWithSpaceAfter(token, formattedQuery);
      } else if (token.value === '.') {
        formattedQuery = this.formatWithoutSpaces(token, formattedQuery);
      } else if (token.value === ';') {
        formattedQuery = this.formatQuerySeparator(token, formattedQuery);
      } else {
        formattedQuery = this.formatWithSpaces(token, formattedQuery);
      }

      if (token.type !== _types.TokenTypes.WHITESPACE) {
        this.previousNonWhiteSpace = token;
      }
    });
    return formattedQuery;
  }

  formatWhitespace(token, query) {
    if (this.cfg.linesBetweenQueries === 'preserve' && /((\r\n|\n)(\r\n|\n)+)/u.test(token.value) && this.previousToken().value === ';') {
      return query.replace(/(\n|\r\n)$/m, '') + token.value;
    }

    return query;
  }

  formatReserved(token, query) {
    // reserved words combination check
    if (token.type === _types.TokenTypes.RESERVED_NEWLINE && this.previousReservedWord && this.previousReservedWord.value && token.value.toUpperCase() === 'AND' && this.previousReservedWord.value.toUpperCase() === 'BETWEEN') {
      token.type = _types.TokenTypes.RESERVED;
    }

    if (token.type === _types.TokenTypes.RESERVED_TOP_LEVEL) {
      query = this.formatTopLevelReservedWord(token, query);
    } else if (token.type === _types.TokenTypes.RESERVED_TOP_LEVEL_NO_INDENT) {
      query = this.formatTopLevelReservedWordNoIndent(token, query);
    } else if (token.type === _types.TokenTypes.RESERVED_NEWLINE) {
      query = this.formatNewlineReservedWord(token, query);
    } else {
      // TokenTypes.RESERVED
      query = this.formatWithSpaces(token, query);
    }

    this.previousReservedWord = token;
    return query;
  }

  formatLineComment(token, query) {
    return this.addNewline(query + token.value);
  }

  formatBlockComment(token, query) {
    return this.addNewline(this.addNewline(query) + this.indentComment(token.value));
  }

  indentComment(comment) {
    return comment.replace(/\n[ \t]*/gu, '\n' + this.indentation.getIndent() + ' ');
  }

  formatTopLevelReservedWordNoIndent(token, query) {
    this.indentation.decreaseTopLevel();
    query = this.addNewline(query) + this.equalizeWhitespace(this.formatReservedWord(token.value));
    return this.addNewline(query);
  }

  formatTopLevelReservedWord(token, query) {
    const shouldChangeTopLevel = this.previousNonWhiteSpace.value !== ',' && !['GRANT'].includes(`${this.previousNonWhiteSpace.value}`.toUpperCase());

    if (shouldChangeTopLevel) {
      this.indentation.decreaseTopLevel();
      query = this.addNewline(query);
    }

    query = query + this.equalizeWhitespace(this.formatReservedWord(token.value)) + ' ';
    if (shouldChangeTopLevel) this.indentation.increaseTopLevel();
    return query;
  }

  formatNewlineReservedWord(token, query) {
    return this.addNewline(query) + this.equalizeWhitespace(this.formatReservedWord(token.value)) + ' ';
  } // Replace any sequence of whitespace characters with single space


  equalizeWhitespace(value) {
    return value.replace(/\s+/gu, ' ');
  } // Opening parentheses increase the block indent level and start a new line


  formatOpeningParentheses(token, query) {
    token.value = this.formatCase(token.value); // Take out the preceding space unless there was whitespace there in the original query
    // or another opening parens or line comment

    const previousTokenType = this.previousToken().type;

    if (previousTokenType !== _types.TokenTypes.WHITESPACE && previousTokenType !== _types.TokenTypes.OPEN_PAREN && previousTokenType !== _types.TokenTypes.LINE_COMMENT) {
      query = trimSpacesEnd(query);
    }

    query += token.value;
    this.inlineBlock.beginIfPossible(this.tokens, this.index);

    if (!this.inlineBlock.isActive()) {
      this.indentation.increaseBlockLevel();
      query = this.addNewline(query);
    }

    return query;
  } // Closing parentheses decrease the block indent level


  formatClosingParentheses(token, query) {
    token.value = this.formatCase(token.value);

    if (this.inlineBlock.isActive()) {
      this.inlineBlock.end();
      return this.formatWithSpaceAfter(token, query);
    } else {
      this.indentation.decreaseBlockLevel();
      return this.formatWithSpaces(token, this.addNewline(query));
    }
  }

  formatPlaceholder(token, query) {
    return query + this.params.get(token) + ' ';
  } // Commas start a new line (unless within inline parentheses or SQL "LIMIT" clause)


  formatComma(token, query) {
    query = trimSpacesEnd(query) + token.value + ' ';

    if (this.inlineBlock.isActive()) {
      return query;
    } else if (/^LIMIT$/iu.test(this.previousReservedWord.value)) {
      return query;
    } else {
      return this.addNewline(query);
    }
  }

  formatWithSpaceAfter(token, query) {
    return trimSpacesEnd(query) + token.value + ' ';
  }

  formatWithoutSpaces(token, query) {
    return trimSpacesEnd(query) + token.value;
  }

  formatWithSpaces(token, query) {
    const value = token.type === _types.TokenTypes.RESERVED ? this.formatReservedWord(token.value) : token.value;
    return query + value + ' ';
  }

  formatReservedWord(value) {
    return this.formatCase(value);
  }

  formatQuerySeparator(token, query) {
    this.indentation.resetIndentation();
    let lines = '\n';

    if (this.cfg.linesBetweenQueries !== 'preserve') {
      lines = '\n'.repeat(this.cfg.linesBetweenQueries || 1);
    }

    return trimSpacesEnd(query) + token.value + lines;
  }

  addNewline(query) {
    query = trimSpacesEnd(query);
    if (!query.endsWith('\n')) query += '\n';
    return query + this.indentation.getIndent();
  }

  previousToken() {
    return this.tokens[this.index - 1] || {
      type: null,
      value: null
    };
  }

  formatCase(value) {
    if (this.cfg.reservedWordCase === 'upper') return value.toUpperCase();
    if (this.cfg.reservedWordCase === 'lower') return value.toLowerCase();
    return value;
  }

}

exports.default = Formatter;