"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _electronNotSupported = _interopRequireDefault(require("./lib/exception/electron-not-supported"));

var _missingModule = _interopRequireDefault(require("./lib/exception/missing-module"));

var _require = _interopRequireWildcard(require("./lib/require"));

var _src = require("../../log/src");

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class AbstractDriver {
  getId() {
    return this.credentials.id;
  }

  constructor(credentials, getWorkspaceFolders) {
    _defineProperty(this, "deps", []);

    _defineProperty(this, "queryResults", async (query, opt) => {
      const result = await this.singleQuery(query, opt);
      if (result.error) throw result.rawError;
      return result.results;
    });

    _defineProperty(this, "requireDep", name => {
      return (0, _require.default)(name);
    });

    _defineProperty(this, "resolveDep", name => {
      return (0, _require.sqltoolsResolve)(name);
    });

    this.credentials = credentials;
    this.getWorkspaceFolders = getWorkspaceFolders;
    this.log = (0, _src.createLogger)(credentials.driver.toLowerCase());
  }

  singleQuery(query, opt) {
    return this.query(query, opt).then(([res]) => res);
  }

  async describeTable(metadata, opt) {
    const result = await this.singleQuery(this.queries.describeTable(metadata), opt);
    result.baseQuery = this.queries.describeTable.raw;
    return [result];
  }

  async showRecords(table, opt) {
    const {
      limit,
      page = 0
    } = opt;
    const params = { ...opt,
      limit,
      table,
      offset: page * limit
    };

    if (typeof this.queries.fetchRecords === 'function' && typeof this.queries.countRecords === 'function') {
      const [records, totalResult] = await Promise.all([this.singleQuery(this.queries.fetchRecords(params), opt), this.singleQuery(this.queries.countRecords(params), opt)]);
      records.baseQuery = this.queries.fetchRecords.raw;
      records.pageSize = limit;
      records.page = page;
      records.total = Number(totalResult.results[0].total);
      records.queryType = 'showRecords';
      records.queryParams = table;
      return [records];
    }

    return this.query(this.queries.fetchRecords(params), opt);
  }

  async checkDependencies() {
    if (!this.deps || this.deps.length === 0) return;

    if (Number(process.env.IS_NODE_RUNTIME || '0') !== 1) {
      throw new _electronNotSupported.default();
    }

    this.deps.forEach(dep => {
      let mustUpgrade = false;

      switch (dep.type) {
        case AbstractDriver.CONSTANTS.DEPENDENCY_PACKAGE:
          try {
            const {
              version
            } = JSON.parse(_fs.default.readFileSync(this.resolveDep(dep.name + '/package.json')).toString());

            if (dep.version && version !== dep.version) {
              mustUpgrade = true;
              throw new Error(`Version not matching. We need to upgrade ${dep.name}`);
            }

            this.requireDep(dep.name);
          } catch (e) {
            throw new _missingModule.default(this.deps, this.credentials, mustUpgrade);
          }

          break;
      }
    });
  }

  getChildrenForItem(_params) {
    this.log.error(`###### Attention ######\getChildrenForItem not implemented for ${this.credentials.driver}\n####################`);
    return Promise.resolve([]);
  }

  searchItems(_itemType, _search, _extraParams) {
    this.log.error(`###### Attention ######\searchItems not implemented for ${this.credentials.driver}\n####################`);
    return Promise.resolve([]);
  }

  async toAbsolutePath(fsPath) {
    if (!_path.default.isAbsolute(fsPath) && /\$\{workspaceFolder:(.+)}/g.test(fsPath)) {
      const workspaceName = fsPath.match(/\$\{workspaceFolder:(.+)}/)[1];

      if (workspaceName) {
        const workspaceFolders = await this.getWorkspaceFolders();
        const dbWorkspace = workspaceFolders.find(w => w.name === workspaceName);
        fsPath = _path.default.resolve(dbWorkspace.uri.replace(/^(\w+):\/\//, ''), fsPath.replace(/\$\{workspaceFolder:(.+)}/g, './'));
      }
    }

    return fsPath;
  }

  prepareMessage(message) {
    return {
      message: message.toString(),
      date: new Date()
    };
  }

}

exports.default = AbstractDriver;

_defineProperty(AbstractDriver, "CONSTANTS", {
  DEPENDENCY_PACKAGE: 'package',
  DEPENDENCY_NPM_SCRIPT: 'npmscript'
});